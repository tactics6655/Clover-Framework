export interface MediaPlayerInterface {
    setSpectrum(selector: string): void;
    isPlaying(): boolean;
    isPaused(): boolean;
    isEnded(): boolean;
    isFullScreen(): boolean;
    seekBackward(seconds: number): void;
    seekForward(seconds: number): void;
    setCurrentTime(time: number): void;
    setBiquadFilterGainValue(value: number): void;
    setBiquadFilterDetuneValue(value: number): void;
    setBiquadFilterFrequencyValue(value: number): void;
    setEqualPowerPannerModel(): void;
    setHRTFPannerModel(): void;
    setPanningModel(modelName: PanningModelType): void;
    setGainValue(value: number): void;
    setParseFrequencyTimeout(timeout: number): void;
    setSource(source: string): void;
    setDelayValue(value: number): void;
    getOfflineAudioContext(options: OfflineAudioContextOptions): OfflineAudioContext;
    getAudioContext(): AudioContext;
    getCurrentTime(): number;
    getSampleRate(): number;
    getSource(): string;
    createAudioContext(): void;
    connectPanEffector(): void;
    connectAnalyser(): void;
    connectToAudioContext(): void;
    connectScriptProcessorFilter(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): void;
    connectIIRFilter(feedforward: number[], feedback: number[]): void;
    connectDynamicsCompressorFilterFilter(): void;
    connectBiquadFilter(): void;
    connectChannelMergerEffector(): void;
    connectDelayEffector(): void;
    connectGainEffector(): void;
    cancelFullScreen(): boolean;
    requestFullScreen(): boolean;
    play(): void;
    pause(): void;
    hasGetUserMedia(): boolean;
    requestAnimationFrame(callback: FrameRequestCallback): number;
    getUserMedia(): any;
    setUserMediaConstraints(constraints?: MediaStreamConstraints): Promise<MediaStream> | Promise<unknown>;
    setContext(mediaContext: any): void;
}